{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "Marketplace__Address_notApproved",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Marketplace__NftAlreadylisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__Only_NftListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__PriceNotmet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__PriceShouldbeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__isnotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__noProceeds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionReverted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftcontractaddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "soldto",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Itembought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftcontractaddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Itemcancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Itemlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftcontractaddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newprice",
          "type": "uint256"
        }
      ],
      "name": "ListingUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftcontractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "BuyNfts",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftcontractaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Cancelisting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "GetProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftcontractaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Getlisting",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct Marketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NftcontractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Price",
          "type": "uint256"
        }
      ],
      "name": "ListNfts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftcontractaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newlistingPrice",
          "type": "uint256"
        }
      ],
      "name": "UpdateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProcess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x93da13b94058a3317e3cdd1ee272a31d254adb6dfaac1bc88a6365f4127af3f7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1235030",
    "logsBloom": "0x
    "blockHash": "0x06b428cddd3e17f1f86644b8128c17582f6e538179fd60ef6ad0b2da50f7daac",
    "transactionHash": "0x93da13b94058a3317e3cdd1ee272a31d254adb6dfaac1bc88a6365f4127af3f7",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1235030",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b02486d131961a1bf1a69ea5d0a1ce64",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Marketplace__Address_notApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Marketplace__NftAlreadylisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__Only_NftListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__PriceNotmet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__PriceShouldbeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__isnotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__noProceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionReverted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftcontractaddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"soldto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Itembought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftcontractaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Itemcancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Itemlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftcontractaddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newprice\",\"type\":\"uint256\"}],\"name\":\"ListingUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftcontractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BuyNfts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftcontractaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Cancelisting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"GetProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftcontractaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Getlisting\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct Marketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NftcontractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Price\",\"type\":\"uint256\"}],\"name\":\"ListNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftcontractaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newlistingPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/* IMPORTS */\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n/* errors */\\r\\nerror Marketplace__PriceShouldbeGreaterThanZero();\\r\\nerror Marketplace__Address_notApproved();\\r\\nerror Marketplace__NftAlreadylisted(address nftAddress, uint256 tokenId);\\r\\nerror Marketplace__Only_NftListed();\\r\\nerror Marketplace__isnotListed();\\r\\nerror Marketplace__PriceNotmet();\\r\\nerror Marketplace__noProceeds();\\r\\nerror TransactionReverted();\\r\\n\\r\\ncontract Marketplace is ReentrancyGuard{\\r\\n  struct Listing {\\r\\n    uint256 price;\\r\\n    address seller;\\r\\n  }\\r\\n  /* State Variables  */\\r\\n  mapping(address => mapping(uint256 => Listing)) private s_listings;\\r\\n\\r\\n  //\\r\\n  mapping(address => uint256) private s_proceeds;\\r\\n\\r\\n  /* Modifiers */\\r\\n  modifier listed(address nftAddress, uint tokenId) {\\r\\n    Listing storage listing = s_listings[nftAddress][tokenId];\\r\\n    if (listing.price <= 0) revert Marketplace__isnotListed();\\r\\n    _;\\r\\n  }\\r\\n  modifier Not_listed(\\r\\n    address nftAddress,\\r\\n    address seller,\\r\\n    uint tokenId\\r\\n  ) {\\r\\n    Listing storage list = s_listings[nftAddress][tokenId];\\r\\n    if (list.price > 0)\\r\\n      revert Marketplace__NftAlreadylisted(nftAddress, tokenId);\\r\\n    _;\\r\\n  }\\r\\n  modifier only_owner(address nftcontractAddress, uint tokenId) {\\r\\n    IERC721 nft = IERC721(nftcontractAddress);\\r\\n    address owner = nft.ownerOf(tokenId);\\r\\n    if (owner != msg.sender) revert Marketplace__Only_NftListed();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /* Events */\\r\\n  event Itemlisted(\\r\\n    address indexed seller,\\r\\n    address indexed nftAddress,\\r\\n    uint indexed tokenId,\\r\\n    uint price\\r\\n  );\\r\\n  event Itembought(\\r\\n    address indexed nftcontractaddress,\\r\\n    address indexed soldto,\\r\\n    uint indexed tokenId,\\r\\n    uint256 price\\r\\n  );\\r\\n  event Itemcancelled(\\r\\n    address indexed seller,\\r\\n    address indexed nftcontractaddress,\\r\\n    uint256 tokenId\\r\\n  );\\r\\n  event ListingUpdated(\\r\\n    address indexed nftcontractaddress,\\r\\n    uint256 indexed  tokenId,\\r\\n    uint256 indexed newprice\\r\\n  );\\r\\n\\r\\n  /*\\r\\n   * @notice Method for listing NFT\\r\\n   * @param nftAddress Address of NFT contract\\r\\n   * @param tokenId Token ID of NFT\\r\\n   * @param price sale price for each item\\r\\n   */\\r\\n  function ListNfts(\\r\\n    address NftcontractAddress,\\r\\n    uint tokenID,\\r\\n    uint Price\\r\\n  )\\r\\n    external\\r\\n    Not_listed(NftcontractAddress, msg.sender, tokenID)\\r\\n    only_owner(NftcontractAddress, tokenID)\\r\\n  {\\r\\n    if (Price == 0) revert Marketplace__PriceShouldbeGreaterThanZero();\\r\\n    /* * NFT's Could be listed in the market place in two ways\\r\\n     * Transferring the NFT to the market contract\\r\\n     * giving the allwance to the NFT's contract to sell  the NFT\\r\\n     * owner can remove the allowance anytime they want and the contract would not be able to sell the asset\\r\\n     */\\r\\n    IERC721 nft = IERC721(NftcontractAddress);\\r\\n    if (nft.getApproved(tokenID) != address(this))\\r\\n      revert Marketplace__Address_notApproved();\\r\\n    s_listings[NftcontractAddress][tokenID] = Listing(Price, msg.sender);\\r\\n    /* Emit event after updating the Mapping */\\r\\n    emit Itemlisted(msg.sender, NftcontractAddress, tokenID, Price);\\r\\n  }\\r\\n\\r\\n  function BuyNfts(\\r\\n    address nftcontractAddress,\\r\\n    uint256 tokenId\\r\\n  ) external payable listed(nftcontractAddress, tokenId) nonReentrant {\\r\\n    Listing storage listing = s_listings[nftcontractAddress][tokenId];\\r\\n    if (listing.price > msg.value) revert Marketplace__PriceNotmet();\\r\\n    s_proceeds[listing.seller] = s_proceeds[listing.seller] + msg.value;\\r\\n    delete (s_listings[nftcontractAddress][tokenId]);\\r\\n    IERC721(nftcontractAddress).safeTransferFrom(\\r\\n      listing.seller,\\r\\n      msg.sender,\\r\\n      tokenId\\r\\n    );\\r\\n    emit Itembought(nftcontractAddress, msg.sender, tokenId, listing.price);\\r\\n  }\\r\\n\\r\\n  /* Cancel listing */\\r\\n  function Cancelisting(\\r\\n    address nftcontractaddress,\\r\\n    uint256 tokenId\\r\\n  )\\r\\n    external\\r\\n    only_owner(nftcontractaddress, tokenId)\\r\\n    listed(nftcontractaddress, tokenId)\\r\\n  {\\r\\n    delete (s_listings[nftcontractaddress][tokenId]);\\r\\n    emit Itemcancelled(msg.sender,nftcontractaddress,tokenId);\\r\\n  }\\r\\n\\r\\n  /* A good practice is to use push ver pull \\r\\n  Don't send the money to the  user but let them withdraw the money\\r\\n*/\\r\\n\\r\\n  /* update Listing */\\r\\n  function UpdateListing(address nftcontractaddress,uint256 tokenId,uint newlistingPrice) external only_owner(nftcontractaddress, tokenId) listed(nftcontractaddress, tokenId){\\r\\n     s_listings[nftcontractaddress][tokenId].price = newlistingPrice;\\r\\n     emit ListingUpdated(nftcontractaddress,tokenId,newlistingPrice);\\r\\n\\r\\n  }\\r\\n\\r\\n  /* Withdraw function to withdraw the money after selling the nft */\\r\\n  function withdrawProcess() external {\\r\\n    uint256 proceeds = s_proceeds[msg.sender];\\r\\n    if(proceeds <= 0) revert Marketplace__noProceeds();\\r\\n    s_proceeds[msg.sender] = 0;\\r\\n    (bool success,) = payable(msg.sender).call{value:proceeds}(\\\"\\\");\\r\\n    if(!success) revert TransactionReverted();\\r\\n  }\\r\\n\\r\\n  /* Getter functions */\\r\\n  function Getlisting(address nftcontractaddress,uint tokenId) external view returns(Listing memory){\\r\\n    return s_listings[nftcontractaddress][tokenId];\\r\\n  }\\r\\n  function GetProceeds(address sender) external view returns(uint256){\\r\\n    return s_proceeds[sender];\\r\\n}\\r\\n}\\r\\n\",\"keccak256\":\"0xaf417fa65381aa845c1bf8c6ae1ed2e1627840b02e75dd0bb044a9a5f5814071\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2625,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "s_listings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2618_storage))"
      },
      {
        "astId": 2629,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2618_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Marketplace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)2618_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)2618_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)2618_storage"
      },
      "t_struct(Listing)2618_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Listing",
        "members": [
          {
            "astId": 2615,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2617,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}